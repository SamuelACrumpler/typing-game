{"version":3,"sources":["routes/game.js","routes/main.js","routes/scores.js","App.js","reportWebVitals.js","index.js"],"names":["game","props","state","name","desc","curWord","input","wordBank","bankTitles","title","score","seconds","wordCount","bank","onChange","bind","countDown","str","this","setState","localStorage","getItem","banks","eng","split","loadBank","esp","dan","history","push","val","timer","setInterval","getRandomWord","rand","Math","floor","random","length","s","clearInterval","setItem","event","target","value","className","type","autocomplete","autoFocus","Component","main","bankDesc","engDesc","espDesc","danDesc","bdesc","bname","index","doesNameExist","arr","window","location","href","placeholder","onClick","changeIndex","xmlns","width","height","fill","class","viewBox","fill-rule","d","onConfirm","result","word","scores","bid","count","path","console","log","saveScore","words","removeItem","axios","get","then","res","data","finally","sort","a","b","breakcheck","i","put","_id","ns","splice","post","getScores","scope","map","App","component","withRouter","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a49a9df.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport banks from \"../files/banks.json\"\r\n\r\n//the game game\r\n/*\r\nNeeds parser\r\nNeeds to display word\r\nneeds timer\r\nneeds score\r\nScore is equal to length of word.\r\nIdeally the game should mark which parts of the words/sentence are wrong.\r\n\r\n*/\r\n\r\n\r\n//selects word bank and displays description also name entry\r\n\r\n\r\nclass game extends Component {\r\n    constructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n            name : '',\r\n            desc : '',\r\n            curWord : 'temp',\r\n            input : '',\r\n            wordBank: '',\r\n            bankTitles : ['English', \"Spanish\", \"Danish\"],\r\n            title : '',\r\n            score : 0,\r\n            seconds : 60,\r\n            wordCount: 0,\r\n            bank : 0\r\n\t\t}\r\n    \r\n        this.onChange = this.onChange.bind(this);\r\n        this.countDown = this.countDown.bind(this);\r\n    \r\n\t\r\n    }\r\n\r\n    componentDidMount() {\r\n      \r\n        let str = \"\";\r\n        this.setState({title :  this.state.bankTitles[localStorage.getItem(\"bankID\")]});\r\n\r\n        switch(localStorage.getItem(\"bankID\")){\r\n            case \"0\":\r\n                str = banks.eng.split(\" \");\r\n                this.loadBank(str);\r\n                break;\r\n            case \"1\":\r\n                this.loadBank(banks.esp.split(\" \"));\r\n                break;\r\n            case \"2\":\r\n                this.loadBank(banks.dan.split(\" \"));\r\n                break;\r\n            default:\r\n                this.props.history.push(\"/\");\r\n                break;\r\n        }\r\n\r\n\r\n\r\n       \r\n      \r\n\r\n\r\n    }\r\n\r\n    loadBank(val){\r\n        this.setState({wordBank : val}, () => \r\n           { \r\n            this.timer = setInterval(this.countDown, 1000)\r\n            this.getRandomWord(); \r\n\r\n           }\r\n        ) \r\n    }\r\n    \r\n    getRandomWord(){\r\n       let rand = Math.floor(Math.random() * this.state.wordBank.length)\r\n       this.setState({curWord : this.state.wordBank[rand]})\r\n\r\n    }\r\n\r\n    countDown() {\r\n        let s = this.state.seconds - 1;\r\n        this.setState({seconds : s})\r\n        \r\n        if (this.state.seconds === 0) { \r\n          clearInterval(this.timer);\r\n          localStorage.setItem(\"score\", this.state.score);\r\n          localStorage.setItem(\"words\", this.state.wordCount);\r\n\r\n            this.props.history.push(\"/scores\")\r\n\r\n        }\r\n      }\r\n\r\n\r\n    onChange(event) {\r\n\t\tconst state = this.state\r\n\t\tstate[event.target.name] = event.target.value;\r\n        this.setState(state);\r\n\r\n\r\n        if(this.state.input === this.state.curWord){\r\n            this.setState({score : this.state.score + this.state.curWord.length});\r\n            this.setState({wordCount : this.state.wordCount+1})\r\n            this.getRandomWord();\r\n            this.setState({ input : '' });\r\n\r\n        }\r\n        \r\n    }\r\n\r\nrender() {\r\n        return (\r\n            <div className=\"container p-2 rounded bg-light\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-4\">\r\n                        <h3>Score: {this.state.score} Word Count: {this.state.wordCount}</h3>\r\n                    </div>\r\n                    <div className=\"col-6 text-center\">\r\n                        <h3>Word Bank : {this.state.title}</h3>\r\n                    </div>\r\n                    <div className=\"col-2\">\r\n                        <h3 className=\"text-right\">Time: {this.state.seconds}</h3>\r\n                    </div>\r\n\t\t\t\t</div>\r\n                <div className=\"text-center mb-4\">\r\n                    <h1>{this.state.curWord}</h1>\r\n                </div>\r\n                <div>\r\n                    <input type=\"text\" name=\"input\" value={this.state.input} onChange={this.onChange} className=\"form-control\" autocomplete=\"off\" autoFocus/>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default game;\r\n","//selects word bank and displays description also name entry\r\nimport React, { Component } from 'react';\r\nimport banks from \"../files/banks.json\"\r\n\r\n\r\n\r\nclass main extends Component {\r\n    constructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n            name : '',\r\n            desc : '',\r\n            bank : ['English', 'Spanish', 'Danish'],\r\n            bankDesc : [banks.engDesc, banks.espDesc, banks.danDesc],\r\n            bdesc: '',\r\n            bname: '',\r\n            index: 0\r\n        }\r\n        \r\n        this.onChange = this.onChange.bind(this);\r\n\r\n\t\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.doesNameExist();\r\n        this.setState({bname : this.state.bank[0]})\r\n        this.setState({bdesc : this.state.bankDesc[this.state.index]})\r\n        var url = window.location.href\r\n        var arr = url.split(\"/\");\r\n        var result = arr[0] + \"//\" + arr[2]\r\n\r\n        \r\n\t}\r\n\r\n    doesNameExist() {\r\n\t\tif (localStorage.getItem(\"name\") !== \"\" || localStorage.getItem(\"name\") !== null) { \r\n\t\t\tthis.setState({name: localStorage.getItem(\"name\")}) \r\n\t\t}\r\n\t}\r\n\r\n\r\n    onChange(event) {\r\n\t\tconst state = this.state\r\n\t\tstate[event.target.name] = event.target.value;\r\n\t\tthis.setState(state);\r\n    }\r\n\r\n    changeIndex(val){\r\n        if(this.state.index === 0 && val < 0){  //zero and value is being lower. Reset index to highest value\r\n            this.setState({index : this.state.bank.length - 1}, () => {//Arrow function will wait until the state is set to proceed with the other actions.\r\n                this.setState({bname : this.state.bank[this.state.index]})\r\n                this.setState({bdesc : this.state.bankDesc[this.state.index]})\r\n            })\r\n        } else if(this.state.index === this.state.bank.length -1 && val > 0){ //if index value is at max, reset index to 0\r\n            this.setState({index : 0}, () => {\r\n                this.setState({bname : this.state.bank[this.state.index]})\r\n                this.setState({bdesc : this.state.bankDesc[this.state.index]})\r\n            })\r\n        } else{\r\n            this.setState({index : this.state.index + val}, () => { //otherwise add value to the index\r\n                this.setState({bname : this.state.bank[this.state.index]})\r\n                this.setState({bdesc : this.state.bankDesc[this.state.index]})\r\n            })\r\n        }\r\n    }\r\n    \r\n    onConfirm() {\r\n\r\n        if(this.state.name === \"\"){\r\n            return;\r\n        }\r\n\t\tlocalStorage.setItem(\"name\", this.state.name);\r\n        localStorage.setItem(\"bankID\", this.state.index);\r\n        this.props.history.push(\"/game\");\r\n\r\n    }\r\n\r\n\r\nrender() {\r\n        return (\r\n            <div className=\"container p-2 rounded bg-light\">\r\n                <div className=\"row\">\r\n                    <div className=\"col mb-3\">\r\n\t\t\t\t    \t<input type=\"text\" placeholder=\"name\" name=\"name\" value={this.state.name} onChange={this.onChange} className=\"form-control\" />\r\n                    </div>\r\n\t\t\t\t</div>\r\n                <div className=\"row col mb-3 m-0 p-0\">\r\n\r\n                    <div className=\"col-1 p-0\">\r\n                        <button className=\"btn btn-lg btn-primary btn-block\" onClick={() => this.changeIndex(-1)}>\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-chevron-left\" viewBox=\"0 0 16 16\">\r\n                                <path fill-rule=\"evenodd\" d=\"M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z\"/>\r\n                            </svg>\r\n                        </button>\r\n                    </div>\r\n\r\n                    <div className=\"col-10 text-center\">\r\n                        <h1>{this.state.bname}</h1>\r\n                    </div>\r\n\r\n                    <div className=\"col-1 p-0\">\r\n                       <button className=\"btn btn-lg btn-primary btn-block float-right\" onClick={() => this.changeIndex(1)}>\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-chevron-right\" viewBox=\"0 0 16 16\">\r\n                                <path fill-rule=\"evenodd\" d=\"M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z\"/>\r\n                            </svg>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                    <p>{this.state.bdesc}</p>\r\n                </div>\r\n                <button class=\"btn btn-primary w-100\" onClick={() => this.onConfirm()}> Submit</button>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default main;","//displays scores\r\n//Load from database, read into object array for the proper\r\n\r\n//selects word bank and displays description also name entry\r\n\r\n// need to map the scores out.\r\n// Type needs to be scored in local storage, then cleared after the values have been downloaded\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nclass score extends Component {\r\n    constructor(props) {\r\n\t\tsuper(props);\r\n        let url = window.location.href\r\n        let arr = url.split(\"/\");\r\n        let result = arr[0] + \"//\" + arr[2]\r\n\t\tthis.state = {\r\n            word : '',\r\n            input : '',\r\n            scores : [],\r\n            bid : 0,\r\n            bname : '',\r\n            count : 0,\r\n            bank : ['English', 'Spanish', 'Danish'],\r\n            path: result\r\n\t\t}\r\n\r\n\t\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.state.path + \"/api/\");\r\n        this.setState({bid : localStorage.getItem(\"bankID\")})\r\n        if(!localStorage.getItem(\"bankID\")){\r\n            this.setState({bname : \"!Invalid Bank!\"})\r\n            this.props.history.push(\"/\");\r\n\r\n        }\r\n        else{\r\n            this.setState({bname : this.state.bank[localStorage.getItem(\"bankID\")]})\r\n            this.saveScore()\r\n        }\r\n    }\r\n    \r\n    saveScore(){\r\n        const bid = localStorage.getItem(\"bankID\");\r\n        const name = localStorage.getItem(\"name\");\r\n        const score = localStorage.getItem(\"score\");\r\n        const words = localStorage.getItem(\"words\");\r\n        console.log(\"nametest: \"+name);\r\n        console.log(\"score \" + score);\r\n        console.log(\"words \" + words);\r\n        localStorage.removeItem(\"bankID\");\r\n        localStorage.removeItem(\"score\");\r\n        localStorage.removeItem(\"words\");\r\n\r\n\r\n\r\n        axios.get(this.state.path + '/api/score/count/' + bid)\r\n            .then(res => {\r\n                this.setState({ count: res.data})\r\n            }).finally(() =>\r\n            {\r\n                if(this.state.count >= 10){\r\n                console.log(\"count \" + this.state.count)\r\n                \r\n                axios.get(this.state.path + '/api/score/board/' + this.state.bid)\r\n                .then(res => {\r\n                    this.setState({scores : res.data})\r\n                }).finally(() => {\r\n                    \r\n                    let s = this.state.scores;\r\n                    console.log(\"b\")\r\n                    console.log(s);\r\n\r\n                    s.sort(function (a,b){\r\n                        return a.value - b.value;\r\n                    });\r\n                    console.log(\"1\")\r\n\r\n                    console.log(s);\r\n\r\n\r\n                    let breakcheck = false;\r\n\r\n                    for(var i = 0; i <= 30; i++ ){\r\n                        console.log(\"tick \"+i)\r\n                        console.log(s)\r\n                        console.log(\"scorecheck cur/iscore\")\r\n                        console.log(score);\r\n                        console.log(s[i].score)\r\n                        if (breakcheck === true){return;}\r\n                        console.log(\"breakcheck check:  \" + breakcheck)\r\n\r\n                        \r\n                        if(score > s[i].score){ //if player makes the high score.\r\n                            axios.put(this.state.path + '/api/score/' + s[i]._id, {bid, name, score, words})\r\n                            breakcheck = true;\r\n                            let ns = {}\r\n                            ns.bid = bid;\r\n                            ns.name = name ;\r\n                            ns.score = score;\r\n                            ns.words = words;\r\n                            s.splice(s.length-1,1)//remove last value in high score board\r\n                            s.push(ns) //add the value to the index\r\n                            s.sort(function (a,b){ //resort\r\n                                return b.score - a.score;\r\n                            });\r\n                            this.setState({scores : s})\r\n                            \r\n\r\n                            \r\n                        }\r\n                    }\r\n\r\n                })\r\n                    \r\n                    \r\n\r\n                } else {\r\n                    //Simply add value\r\n                    axios.post(this.state.path + '/api/score/', {bid, name, score, words})\r\n                        .finally(()=>{\r\n                            this.getScores()\r\n                        }) \r\n                        \r\n\r\n                }\r\n            })\r\n    }\r\n\r\n    getScores(){\r\n        axios.get(this.state.path + '/api/score/board/' + this.state.bid)\r\n            .then(res => {\r\n                this.setState({scores : res.data})\r\n            })\r\n    }\r\n\r\n    onConfirm() {\r\n\r\n\r\n        this.props.history.push(\"/\");\r\n\r\n    }\r\n\r\n\r\nrender() {\r\n        return (\r\n            <div className=\"container p-2 rounded bg-light\">\r\n                <div className=\"text-center\">\r\n                    <h3>Top Scores For {this.state.bname}</h3>\r\n\t\t\t\t</div>\r\n                <div className=\"\">\r\n                    <table className=\"table\">\r\n                    <thead className=\"thead-dark\">\r\n                    <tr>\r\n                        <th scope=\"col\">Rank</th>\r\n                        <th scope=\"col\">Name</th>\r\n                        <th scope=\"col\">Score</th>\r\n                        <th scope=\"col\">Words</th>\r\n                    </tr>\r\n                    </thead>\r\n                    {\r\n                        this.state.scores.map((data, index) => (\r\n                        <tr> \r\n                            <th key={index}>{index+1}</th>   \r\n                            <td>{data.name}</td>\r\n                            <td>{data.score}</td>\r\n                            <td>{data.words}</td>\r\n                        </tr>\r\n                            )\r\n                        )\r\n\r\n                    }\r\n                    </table>\r\n                </div>\r\n                <div>\r\n                    <button class=\"btn btn-primary w-100\" onClick={() => this.onConfirm()}>Return</button>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default score;\r\n","import React from 'react';\nimport { BrowserRouter, Route, Switch, withRouter } from 'react-router-dom';\nimport game from './routes/game';\nimport main from './routes/main';\nimport scores from './routes/scores';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <main className=\"main full-height h-100 w-100 bg-dark\">\n      <BrowserRouter>\n        \n          <Route path=\"/\" component={withRouter(main)} exact />\n          <Route path=\"/game\" component={withRouter(game)} />\n          <Route path=\"/scores\" component={withRouter(scores)} />\n  \n      </BrowserRouter>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport $ from 'jquery';\nimport './css/main.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}